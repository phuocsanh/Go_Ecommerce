# version: "3.9"

# services:
#   mysql:
#     image: mysql:8.0
#     container_name: mysql_ecommerce_sq
#     environment:
#       MYSQL_ROOT_PASSWORD: 123456
#       MYSQL_DATABASE: GO_ECOMMERCE
#     ports:
#       - "3308:3306"
#     volumes:
#       - mysql_data:/var/lib/mysql
#       - ./init:/docker-entrypoint-initdb.d
#     networks:
#       - ecommerce_net
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
#       interval: 10s
#       timeout: 5s
#       retries: 3

#   redis:
#     image: redis:7.0
#     container_name: redis_ecommerce_sq
#     ports:
#       - "6381:6379"
#     volumes:
#       - redis_data:/data
#     networks:
#       - ecommerce_net
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 5s
#       retries: 3

#   crm.go_ecommerce_sq:
#     container_name: go_ecommerce_sq
#     build:
#       context: .
#       dockerfile: Dockerfile
#     restart: always
#     ports:
#       - "8008:8002"
#     depends_on:
#       - mysql
#       - redis
#     environment:
#       MYSQL_HOST: mysql
#       MYSQL_PORT: 3306
#       MYSQL_USER: root
#       MYSQL_PASSWORD: 123456
#       MYSQL_DATABASE: GO_ECOMMERCE
#       REDIS_HOST: redis
#       REDIS_PORT: 6379
#     networks:
#       - ecommerce_net
#     volumes:
#       - ./path/to/your/app:/app

# networks:
#   ecommerce_net:

# volumes:
#   mysql_data:
#   redis_data:

services:
  mysql:
    image: mysql:8.0
    container_name: mysql_ecommerce_sq
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: GO_ECOMMERCE
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - sq_ecommerce_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4
    container_name: redis_ecommerce_sq
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    networks:
      - sq_ecommerce_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend_api:
    container_name: backend_go_ecommerce
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8002:8002"
    volumes:
      - .:/app # Mount all source code from host into container
    depends_on:
      - mysql
      - redis
    networks:
      - sq_ecommerce_network
    stdin_open: true
    tty: true
    env_file:
      - .env
    environment:
      SENDGRID_API_KEY: ${SENDGRID_API_KEY} # Thêm dòng này
      SENDER_EMAIL: ${SENDER_EMAIL}

  zookeeper:
    # platform: linux/amd64
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "32181:32181"
      - "2888:2888"
      - "3888:3888"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 32181
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
    networks:
      - sq_ecommerce_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: broker
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29091
      KAFKA_CLUSTERS_0_METRICS_PORT: 19101
      KAFKA_CLUSTERS_0_JMX_PORT: 19101
      DYNAMIC_CONFIG_ENABLED: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
    networks:
      - sq_ecommerce_network

  broker:
    # platform: linux/amd64
    image: confluentinc/cp-kafka:7.4.0
    container_name: broker
    restart: unless-stopped
    ports:
      - "9091:9091"
      - "19101:19101"
    depends_on:
      - zookeeper
    environment:
      KAFKA_MAX_REQUEST_SIZE: 200000000 # Tăng giới hạn request size lên 200 MB
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 200000000 # Tăng giới hạn socket request lên 200 MB
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:29091,EXTERNAL://localhost:9091
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_JMX_PORT: 19101
      KAFKA_JMX_HOSTNAME: broker
      KAFKA_JMX_USER: myuser
      KAFKA_JMX_PASSWORD: mypassword
    volumes:
      - broker_data:/var/lib/kafka/data
      - ./jmxremote.password:/user/lib/jvm/zulu11-ca/conf/management/jmxremote.password
      - ./jmxremote.access:/user/lib/jvm/zulu11-ca/conf/management/jmxremote.access
    networks:
      - sq_ecommerce_network

volumes:
  mysql_data:
  redis_data:
  broker_data:

networks:
  sq_ecommerce_network:
